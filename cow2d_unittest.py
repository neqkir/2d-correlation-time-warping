###################################################################################################
###################################################################################################
####
####             Correlation Optimized Warping 2D - unittests
#### 
###################################################################################################

## A Comprehensive Two-Dimensional Retention Time Alignment Algorithm To Enhance Chemometric Analysis
## of Comprehensive Two-Dimensional Separation Data,
## Karisa M. Pierce, Lianna F. Wood, Bob W. Wright, Robert E. Synovec, 2005
 
import unittest
import cow2d
import cow
import matplotlib.pyplot as plt

class TestSequenceFunctions(unittest.TestCase): #subclass unittest.TestCase

    def setUp(self): # setUp() is called prior to each test
        self.X = [[1,0,1],[2,1,3],[6,4,3],[2,3,4],[1,1,1],[2,3,4],[3,4,5]]
        self.cow = cow2d.COW2D(self.X, 5, 5, 1, 1, 1, 2)
        
        
        
    def testAverageRows(self): # update target matrix with average
        self.cow.updateAvgTargetDim2(3)
        toComp = [self.cow.target[3][j] for j in range(3)]
        self.assertListAlmostEqual(toComp,[2.6,2.4,3],10)

    def testAverageCols(self): # update target matrix with average
        self.cow.updateAvgTargetDim1(1)
        toComp = [self.cow.target[i][1] for i in range(len(self.X))]
        self.assertListAlmostEqual(toComp,[0.66666666666666663, 2.0,
                                           4.333333333333333, 3.0, 1.0, 3.0, 4.0],10)
        
    def testAlignSampleToTarget2(self): # align sample to target
        Y = []
        with open("A1.txt","r") as infile:
            a1 = [float(line) for line in infile]
        with open("A2.txt","r") as infile:
            a2 = [float(line) for line in infile]
        a1 = a1[9700:9900] 
        a2 = a2[9700:9900]
        Y.append(a1)
        Y.append(a1)
        cow2 = cow2d.COW2D(Y, 5, 16, 1, 6, 1, 2)
        
        for i in range(len(a2)):
            cow2.target[0][i] = a2[i]
            cow2.target[1][i] = a2[i]
            
        aligned = cow2.alignSampleToTargetDim2(1)
        
        plt.plot([cow2.sample[1][i] for i in range(len(a1))],'x')
        plt.plot(aligned, 'r')
        plt.plot([a2[i] for i in range(len(a2))], 'b')
        plt.show()
        alignedComp = [2559.6923076923076, 2735.769230769231, 3000.4615384615386,
                       3366.6923076923076, 3871.307692307693, 4550.0, 5421.307692307692, 6471.384615384616, 7719.538461538461, 9137.153846153848, 10709.538461538463, 12307.692307692309, 13860.307692307691, 14829.692307692309,
                       15738.461538461539, 16577.76923076923, 17330.384615384617, 17973.0, 18498.23076923077, 18887.23076923077, 19123.53846153846, 19223.69230769231, 19187.076923076922, 19000.846153846152, 18675.0, 18189.0,
                       17537.0, 16775.0, 15953.0, 15082.0, 14132.0, 13182.0, 12214.0, 11278.0, 10392.0, 9533.0, 8760.0, 8001.0, 7348.0, 6756.0, 6235.0, 5784.0, 5407.0, 5102.0, 4886.0, 4712.0, 4611.0, 4574.0, 4593.461538461538,
                       4676.384615384615, 4806.846153846154, 4987.0, 5217.153846153847, 5465.307692307692, 5723.7692307692305, 5991.923076923077, 6274.153846153846, 6543.692307692308, 6787.846153846154, 7003.846153846154,
                       7160.307692307692, 7276.0, 7353.153846153846, 7396.538461538462, 7413.384615384615, 7403.384615384615, 7352.615384615385, 7277.2307692307695, 7169.846153846154, 7038.461538461538, 6890.7692307692305,
                       6728.7692307692305, 6527.846153846154, 6271.538461538462, 6003.692307692308, 5731.076923076923, 5441.153846153846, 5175.461538461538, 4922.923076923077, 4672.461538461538, 4442.7692307692305, 4231.538461538461,
                       4038.076923076923, 3863.3076923076924, 3724.5384615384614, 3616.6923076923076, 3511.3076923076924, 3418.5384615384614, 3342.230769230769, 3274.769230769231, 3216.6153846153848, 3168.5384615384614,
                       3123.6153846153848, 3082.076923076923, 3053.153846153846, 3019.230769230769, 2993.076923076923, 2956.4615384615386, 2925.3076923076924, 2894.923076923077, 2867.6153846153848, 2839.923076923077,
                       2807.230769230769, 2779.3076923076924, 2745.076923076923, 2709.3076923076924, 2680.4615384615386, 2651.153846153846, 2624.6923076923076, 2603.4615384615386, 2583.6153846153848, 2565.4615384615386,
                       2550.076923076923, 2539.6153846153848, 2525.0, 2506.5384615384614, 2494.230769230769, 2483.3076923076924, 2474.846153846154, 2466.3076923076924, 2451.230769230769, 2437.6153846153848, 2433.0, 2425.3076923076924,
                       2424.076923076923, 2422.4615384615386, 2416.230769230769, 2422.076923076923, 2421.769230769231, 2426.923076923077, 2426.0, 2426.6923076923076, 2430.0, 2430.153846153846, 2432.3846153846152,
                       2435.769230769231, 2435.3076923076924, 2436.6923076923076, 2432.3846153846152, 2433.4615384615386, 2433.6153846153848, 2431.4615384615386, 2426.769230769231, 2429.6923076923076, 2426.923076923077,
                       2424.3846153846152, 2424.230769230769, 2426.0, 2416.0, 2414.6153846153848, 2414.230769230769, 2411.3076923076924, 2402.846153846154, 2396.4615384615386, 2392.6153846153848, 2390.5384615384614,
                       2388.3846153846152, 2379.923076923077, 2373.3076923076924, 2368.230769230769, 2360.076923076923, 2355.153846153846, 2349.769230769231, 2342.076923076923, 2336.230769230769, 2331.153846153846,
                       2329.153846153846, 2319.769230769231, 2314.846153846154, 2313.769230769231, 2314.230769230769, 2307.3076923076924, 2305.4615384615386, 2305.846153846154, 2305.153846153846, 2301.230769230769, 2297.769230769231,
                       2297.076923076923, 2297.6153846153848, 2296.4615384615386, 2293.4761904761904, 2289.7619047619046, 2293.285714285714, 2294.3809523809523, 2290.3333333333335, 2286.1428571428573, 2285.0, 2286.904761904762,
                       2291.8571428571427, 2285.095238095238, 2286.904761904762, 2288.714285714286, 2284.4285714285716, 2281.6666666666665, 2279.8571428571427,
                       2281.8571428571427, 2284.2380952380954, 2283.5714285714284, 2283.4761904761904, 2277.0]
        self.assertListAlmostEqual(aligned, alignedComp, 10)

    def testAlign2D(self): # test alignment for 2 chromatograms
        Y = []
        with open("A1.txt","r") as infile:
            a1 = [float(line) for line in infile]
        with open("A2.txt","r") as infile:
            a2 = [float(line) for line in infile]
        a1 = a1[9700:9900] 
        a2 = a2[9700:9900]
        Y.append(a1)
        Y.append(a2)
        cow2 = cow2d.COW2D(Y, 16, 16, 6, 6, 1, 1)
        cow2.align()


    def testAlign2D2(self): # test alignment for 2 chromatograms
        Y = []
        with open("A1.txt","r") as infile:
            a1 = [float(line) for line in infile]
        with open("A2.txt","r") as infile:
            a2 = [float(line) for line in infile]
        a1 = a1[9700:9900] 
        a2 = a2[9700:9900]
        for i in range(12):
            Y.append(a1)
            Y.append(a2)
        cow2 = cow2d.COW2D(Y, 4, 16, 6, 6, 1, 1)
        cow2.align()

        
    def assertListAlmostEqual(self, list1, list2, tol):
        """
        Assert if two lists are almost equal
        """
        self.assertEqual(len(list1), len(list2))
        for a, b in zip(list1, list2):
             self.assertAlmostEqual(a, b, tol)

    def assertMatrixAlmostEqual(self, mat1, mat2, tol):
        """
        Assert if two matrices are almost equal
        """
        self.assertEqual((len(mat1[0]),len(mat2[0])), (len(mat1[1]),len(mat2[1])))
        for i in range(len(mat1)):
            for a, b in zip(mat1[i], mat2[i]):
                 self.assertAlmostEqual(a, b, tol)
 

    
if __name__ == '__main__':
    unittest.main()
    

